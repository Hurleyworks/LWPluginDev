// This header file was auto-generated by ClassMate++
// Created: 14 May 2011 10:21:33 pm
// Copyright (c) 2011, HurleyWorks

#pragma once

// thanks to Mike Wolfe

namespace Statics
{
    // --------- Instance functions
    template <class C>
    static void destroy (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->destroy (inst);
    }

    template <class C>
    static const char* describe (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->describe (inst);
    }

    template <class C>
    static LWError copy (LWInstance d1, LWInstance d2)
    {
        C* cl = (C*)d1;
        return cl->copy (d1, d2);
    }

    template <class C>
    static LWError load (LWInstance inst, const LWLoadState* load)
    {
        C* cl = (C*)inst;
        return cl->load (inst, load);
    }

    template <class C>
    static LWError save (LWInstance inst, const LWSaveState* save)
    {
        C* cl = (C*)inst;
        return cl->save (inst, save);
    }

    // ---------------------Instancing
    template <class C>
    static void onEvaluate (LWInstance inst, const LWInstancerAccess* access)
    {
        C* cl = (C*)inst;
        return cl->onEvaluate (inst, access);
    }

    // ---------------------Master
    template <class C>
    static double onMasterEvent (LWInstance inst, const LWMasterAccess* access)
    {
        C* cl = (C*)inst;
        return cl->onMasterEvent (inst, access);
    }

    template <class C>
    static unsigned int masterFlags (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->masterFlags (inst);
    }

    // ---------------------Displacement
    template <class C>
    static void processPoints (LWInstance inst, LWDisplacementAccess* access)
    {
        C* cl = (C*)inst;
        return cl->processPoints (inst, access);
    }

    template <class C>
    static unsigned int displaceFlags (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->displaceFlags (inst);
    }

    // ---------------------Object Replacement
    template <class C>
    static void replaceObject (LWInstance inst, LWObjReplacementAccess* access)
    {
        C* cl = (C*)inst;
        return cl->replaceObject (inst, access);
    }

    // ---------------------Image filter
    template <class C>
    static void processPixels (LWInstance inst, const LWFilterAccess* access)
    {
        C* cl = (C*)inst;
        return cl->processPixels (inst, access);
    }

    template <class C>
    static int* pixelFlags (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->pixelFlags (inst);
    }

    // ---------------------Motion
    template <class C>
    static void processMotion (LWInstance inst, const LWItemMotionAccess* access)
    {
        C* cl = (C*)inst;
        return cl->processMotion (inst, access);
    }

    template <class C>
    static unsigned int motionFlags (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->motionFlags (inst);
    }

    // ---------------------Object replacement
    template <class C>
    static void objReplaceEval (LWInstance inst, LWObjReplacementAccess* access)
    {
        C* cl = (C*)inst;
        return cl->objReplaceEval (inst, access);
    }

    // ---------------------Items
    template <class C>
    static const LWItemID* useItems (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->useItems (inst);
    }

    template <class C>
    static void changeID (LWInstance inst, const LWItemID* ID)
    {
        C* cl = (C*)inst;
        return cl->changeID (inst, ID);
    }

    // --------------------- XPanels
    template <class C>
    static void panelClosed (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->panelClosed (inst);
    }

    template <class C>
    static void* get (LWInstance inst, unsigned int vid)
    {
        C* cl = (C*)inst;
        return cl->get (inst, vid);
    }

    template <class C>
    static LWXPRefreshCode set (LWInstance inst, unsigned int vid, void* value)
    {
        C* cl = (C*)inst;
        return cl->set (inst, vid, value);
    }

    template <class C>
    static int meshCount (void* inst)
    {
        C* cl = (C*)inst;
        return cl->meshCount (inst);
    }

    template <class C>
    static const char* meshName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->meshName (inst, index);
    }

    template <class C>
    static int forceCount (void* inst)
    {
        C* cl = (C*)inst;
        return cl->forceCount (inst);
    }

    template <class C>
    static const char* forceName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->forceName (inst, index);
    }

    template <class C>
    static int vmapCount (void* inst)
    {
        C* cl = (C*)inst;
        return cl->vmapCount (inst);
    }

    template <class C>
    static const char* vmapName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->vmapName (inst, index);
    }

    template <class C>
    static int macroCount (void* inst)
    {
        C* cl = (C*)inst;
        return cl->macroCount (inst);
    }

    template <class C>
    static const char* macroName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->macroName (inst, index);
    }

    template <class C>
    static int effectedByCount (void* inst)
    {
        C* cl = (C*)inst;
        return cl->effectedByCount (inst);
    }

    template <class C>
    static const char* effectedByName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->effectedByName (inst, index);
    }

    template <class C>
    static int surfaceCount (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->surfaceCount (inst);
    }

    template <class C>
    static const char* surfaceName (void* inst, int index)
    {
        C* cl = (C*)inst;
        return cl->surfaceName (inst, index);
    }

    template <class C>
    static int selectedCount (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->selectedCount (inst);
    }

    template <class C>
    static const char* selectedName (void* inst, int index)
    {
        C* cl = (C*)inst;
        return cl->selectedName (inst, index);
    }

    // ------------------ Comring
    template <class C>
    static void ringEvent (LWInstance inst,
                           void* portData,
                           int eventCode,
                           void* eventData)
    {
        C* cl = (C*)inst;
        return cl->ringEvent (inst, portData, eventCode, eventData);
    }

    // ------------------ Gizmo
    template <class C>
    int adjust (LWInstance inst, LWToolEvent* evnt, int i)
    {
        C* cl = (C*)inst;
        return cl->adjust (inst, evnt, i);
    }

    template <class C>
    int count (LWInstance inst, LWToolEvent* evnt)
    {
        C* cl = (C*)inst;
        return cl->count (inst, evnt);
    }

    template <class C>
    int dirty (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->dirty (inst);
    }

    template <class C>
    void done (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->done (inst);
    }

    template <class C>
    int down (LWInstance inst, LWToolEvent* evnt)
    {
        C* cl = (C*)inst;
        return cl->down (inst, evnt);
    }

    template <class C>
    void draw (LWInstance inst, LWCustomObjAccess* access)
    {
        C* cl = (C*)inst;
        return cl->draw (inst, access);
    }

    template <class C>
    void gizmoEvent (LWInstance inst, int code)
    {
        C* cl = (C*)inst;
        return cl->gizmoEvent (inst, code);
    }

    template <class C>
    int handle (LWInstance inst, LWToolEvent* evnt, int i, LWDVector pos)
    {
        C* cl = (C*)inst;
        return cl->handle (inst, evnt, i, pos);
    }

    template <class C>
    const char* help (LWInstance inst, LWToolEvent* evnt)
    {
        C* cl = (C*)inst;
        return cl->help (inst, evnt);
    }

    template <class C>
    void move (LWInstance inst, LWToolEvent* evnt)
    {
        C* cl = (C*)inst;
        return cl->move (inst, evnt);
    }

    template <class C>
    LWXPanelID panel (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->panel (inst);
    }

    template <class C>
    int start (LWInstance inst, LWToolEvent* evnt)
    {
        C* cl = (C*)inst;
        return cl->start (inst, evnt);
    }

    template <class C>
    void up (LWInstance inst, LWToolEvent* evnt)
    {
        C* cl = (C*)inst;
        return cl->up (inst, evnt);
    }

    template <class C>
    const LWItemID* pickItems (LWInstance inst, const LWItemID* drawItems, const unsigned int* drawParts)
    {
        C* cl = (C*)inst;
        return cl->pickItems (inst, drawItems, drawParts);
    }

    // LayoutTool
    template <class C>
    void toolEvent (LWInstance inst, int code)
    {
        C* cl = (C*)inst;
        return cl->toolEvent (inst, code);
    }

    // MdelerTool
    // Test
    template <class C>
    static int test (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->test (inst);
    }

    template <class C>
    LWXPanelID createGui (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->createGui (inst);
    }

    // drawTool
    template <class C>
    static void drawTool (LWInstance inst, LWWireDrawAccess* draw)
    {
        C* cl = (C*)inst;
        return cl->drawTool (inst, draw);
    }

    // Build
    template <class C>
    static LWError build (LWInstance inst, MeshEditOp* op)
    {
        C* cl = (C*)inst;
        return cl->build (inst, op);
    }

    // End
    template <class C>
    static void end (LWInstance inst, int keep)
    {
        C* cl = (C*)inst;
        return cl->end (inst, keep);
    }

    template <class C>
    static int undo (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->undo (inst);
    }

    template <class C>
    static int redo (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->redo (inst);
    }

    // MeshEdit
    template <class C>
    static EDError pointScan (LWInstance inst, LWPntID pntID)
    {
        C* cl = (C*)inst;
        return cl->pointScan (inst, pntID);
    }

    template <class C>
    static EDError edgeScan (LWInstance inst, LWEdgeID edgeID)
    {
        C* cl = (C*)inst;
        return cl->edgeScan (inst, edgeID);
    }

    template <class C>
    static EDError polygonScan (LWInstance inst, const EDPolygonInfo* polInfo)
    {
        C* cl = (C*)inst;
        return cl->polygonScan (inst, polInfo);
    }

    template <class C>
    static EDError polyScan (LWInstance inst, LWPolID polyID)
    {
        C* cl = (C*)inst;
        return cl->polyScan (inst, polyID);
    }

    // ---------------------------------------Custom Object
    template <class C>
    static void customObjEval (LWInstance inst, const LWCustomObjAccess* access)
    {
        C* cl = (C*)inst;
        return cl->customObjEval (inst, access);
    }

    template <class C>
    static unsigned int customObjFlags (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->customObjFlags (inst);
    }

    // panels
    template <class C>
    static void controlEvent (LWControlID control, LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->controlEvent (control, 0);
    }

    template <class C>
    static int selectionEvent (LWControlID control, LWInstance inst, int index, int boolean)
    {
        C* cl = (C*)inst;
        return cl->selectionEvent (control, nullptr, index, boolean);
    }

    template <class C>
    static int selectionEvent2 (LWControlID control, LWInstance inst, int index, int boolean)
    {
        C* cl = (C*)inst;
        return cl->selectionEvent2 (control, nullptr, index, boolean);
    }

    template <class C>
    static int listCount (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->listCount (0);
    }

    template <class C>
    static int listCount2 (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->listCount2 (0);
    }

    template <class C>
    static char* listName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->listName (0, index);
    }

    template <class C>
    static int colWidth (LWInstance inst, int width)
    {
        C* cl = (C*)inst;
        return cl->colWidth (0, width);
    }

    template <class C>
    static int colWidth2 (LWInstance inst, int width)
    {
        C* cl = (C*)inst;
        return cl->colWidth2 (0, width);
    }

#if defined(LW2018) || defined(LW2020)
    template <class C>
    static const char* multiListName (LWInstance inst, int index, int col)
    {
        C* cl = (C*)inst;
        return cl->multiListName (0, index, col);
    }

    template <class C>
    static const char* multiListName2 (LWInstance inst, int index, int col)
    {
        C* cl = (C*)inst;
        return cl->multiListName2 (0, index, col);
    }
#else
    template <class C>
    static char* multiListName (LWInstance inst, int index, int col)
    {
        C* cl = (C*)inst;
        return cl->multiListName (0, index, col);
    }

    template <class C>
    static char* multiListName2 (LWInstance inst, int index, int col)
    {
        C* cl = (C*)inst;
        return cl->multiListName2 (0, index, col);
    }
#endif

    template <class C>
    static int layerCount (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->layerCount (0);
    }

#if defined(LW2018) || defined(LW2020)
    template <class C>
    static const char* itemName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->itemName (0, index);
    }
#else
    template <class C>
    static char* itemName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->itemName (0, index);
    }
#endif

    template <class C>
    static int itemCount (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->itemCount (0);
    }

#if defined(LW2018) || defined(LW2020)
    template <class C>
    static const char* itemName2 (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->itemName2 (0, index);
    }
#else
    template <class C>
    static char* itemName2 (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->itemName2 (0, index);
    }
#endif
    template <class C>
    static int itemCount2 (LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->itemCount2 (0);
    }

    template <class C>
    static char* layerName (LWInstance inst, int index)
    {
        C* cl = (C*)inst;
        return cl->layerName (0, index);
    }

    template <class C>
    static void panelUser (LWPanelID panelID, LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->panelUser (panelID, 0);
    }

    template <class C>
    static void onPanelClose (LWPanelID panelID, LWInstance inst)
    {
        C* cl = (C*)inst;
        return cl->onPanelClose (panelID, 0);
    }

    template <class C>
    static int panelKey (LWPanelID panelID, LWInstance inst, LWDualKey key)
    {
        C* cl = (C*)inst;
        return cl->panelKey (panelID, 0, key);
    }

    template <class C>
    static void panelMouse (LWPanelID panelID, LWInstance inst, int qualifiers, int x, int y)
    {
        C* cl = (C*)inst;
        return cl->panelMouse (panelID, 0, qualifiers, x, y);
    }

    template <class C>
    static void panelMouseWheel (LWPanelID panelID, LWInstance inst, int qualifiers, int x, int y)
    {
        C* cl = (C*)inst;
        return cl->panelMouseWheel (panelID, 0, qualifiers, x, y);
    }

    template <class C>
    static void panelDraw (LWPanelID panelID, LWInstance inst, DrMode mode)
    {
        C* cl = (C*)inst;
        return cl->panelDraw (panelID, 0, mode);
    }

    template <class C>
    static void panelResize (LWPanelID panelID, LWInstance inst, int width, int height)
    {
        C* cl = (C*)inst;
        return cl->panelResize (panelID, 0, width, height);
    }

    template <class C>
    static int treeCount (LWInstance inst, void* node)
    {
        C* cl = (C*)inst;
        return cl->treeCount (inst, node);
    }

    template <class C>
    static void* treeChild (LWInstance inst, LWInstance node, int i)
    {
        C* cl = (C*)inst;
        return cl->treeChild (inst, node, i);
    }

    template <class C>
#if defined(LW2018) || defined(LW2020)
    static const char* multiTreeInfo (LWInstance inst, LWInstance node, int column, int* flags)
    {
        C* cl = (C*)inst;
        return cl->multiTreeInfo (inst, node, column, flags);
    }
#else
    static char* multiTreeInfo (LWInstance inst, LWInstance node, int column, int* flags)
    {
        C* cl = (C*)inst;
        return cl->multiTreeInfo (inst, node, column, flags);
    }
#endif

    template <class C>
    static char* treeInfo (LWInstance inst, LWInstance node, int* flags)
    {
        C* cl = (C*)inst;
        return cl->treeInfo (inst, node, flags);
    }

} // namespace Statics