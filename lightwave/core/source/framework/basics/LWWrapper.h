// This header file was auto-generated by ClassMate++
// Created: 29 May 2015 8:42:09 am
// Copyright (c) 2015, HurleyWorks

#pragma once

#include "LWData.h"

class LWWrapper
{
 public:
    LWWrapper();
    ~LWWrapper() = default;

    bool init (GlobalFunc* const g);

    // update
    void refresh() { runCmd_ ("Refresh"); }
    void refreshNow() { runCmd_ ("RefreshNow"); }
    void redrawNow() { runCmd_ ("RedrawNow"); }
    void dirtyMotion (LWItemID itemID = LWITEM_NULL);
    void setInteractiveMode (int state);
    void setDynamicUpdate (int level);

    // selection
    void selectItem (LWItemID itemID);
    bool isSelected (LWItemID itemID) { return itemInfo_->selected (itemID); };
    void deselectItem (LWItemID itemID);
    void updateSelectionSet (LWItemType selectionMode = LWI_OBJECT);

    // parenting
    LWItemID getParent (LWItemID itemID) { return itemInfo_->parent (itemID); }
    bool hasChildren (LWItemID itemID);

    // item
    std::string getFileName (LWItemID itemID) { return std::string (objectInfo_->filename (itemID)); }
    LWItemInfo* getItemInfo() const { return itemInfo_; }
    void selectAndClear (LWItemID itemID);
    void clone (LWItemID itemID, int count = 1);
    void scale (LWItemID itemID, const Eigen::Vector3f& scale, LWTime time = 0.0);
    void movePivot (LWItemID itemID, const Eigen::Vector3f& newPivot);
    void transformItem (LWItemID itemID, const Eigen::Affine3f& pose, LWTime time = 0.0);
    LWItemID getItemFromName (const std::string& itemName);
    bool getItemTransform (LWItemID itemID,
                           Eigen::Affine3f& transform,
                           Eigen::Vector3f& scale,
                           LWTime time = 0.0);

    bool getItemLocalTransform (LWItemID itemID,
                                Eigen::Affine3f& transform,
                                Eigen::Vector3f& scale,
                                LWTime time = 0.0);

    const std::string getItemName (const LWItemID& itemID) const { return itemInfo_->name (itemID); }
    const char* getItemNamePointer (const LWItemID& itemID) const { return itemInfo_->name (itemID); }
    // void getAllSceneItems(LWItemArray & allItems);
    // void getAllSceneItemNames(juce::StringArray & names);

    // plugin
    void applyPlugin (LWItemID item,
                      const std::string& pluginClass,
                      const std::string& pluginName,
                      bool addIfAlreadyAdded = false);
    void applyPlugin (const std::string& pluginClass,
                      const std::string& pluginName);
    bool areOtherMotionPluginsApplied (LWItemID item, const std::string& pluginName);

    int findMasterIndex (const std::string& pluginName);

    // instance
    LWItemID getInstancedItem() const { return instancedItem; }
    void setInstancedItem (LWItemID itemID) { instancedItem = itemID; }

    // mesh
    LWObjectInfo* getObjectInfo() { return objectInfo_; }
    bool isMesh (LWItemID itemID);
    void createMeshEditOp (const std::string& pluginName);
    void createNull (const std::string& meshName);
    LWItemID createNull (const std::string& meshName,
                         const std::string& pluginName);

    // util
    std::string vectorComponentsToString (const Eigen::Vector3f& vec);

    // animation
    void setLastPreviewFrame (int frame);

 private:
    GlobalFunc* global_ = nullptr;
    LWItemInfo* itemInfo_ = nullptr;
    LWSceneInfo* sceneInfo_ = nullptr;
    LWObjectInfo* objectInfo_ = nullptr;
    LWSurfaceFuncs* surfFuncs_ = nullptr;
    LWCommandFunc* runCmd_ = nullptr;
    LWObjectFuncs* objFuncs_ = nullptr;
    LWInterfaceInfo* interfaceInfo_ = nullptr;
    LWTextureFuncs* txFuncs_ = nullptr;
    LWDirInfoFunc* dirInfo_ = nullptr;
    LWServerInfo* serverInfo_ = nullptr;
    LWTimeInfo* timeInfo_ = nullptr;

    // versions
    int itemInfoVers_ = -1;
    int sceneInfoVers_ = -1;
    int objectInfoVers_ = -1;
    int surfFuncsVers_ = -1;
    int runCmdVers_ = -1;
    int objFuncsVers_ = -1;
    int interfaceInfoVers_ = -1;
    int txtFuncsVers_ = -1;
    int dirInfoVers_ = -1;
    int serverInfoVers_ = -1;

    int motionPluginCount_ = 0;

    LWItemID instancedItem = LWITEM_NULL;

}; // end class LWWrapper
