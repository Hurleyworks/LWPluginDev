// This header file was auto-generated by ClassMate++
// Created: 15 Apr 2012 8:57:30 pm
// Copyright (c) 2012, HurleyWorks

#pragma once

class IMaster
{
 public:
    IMaster (GlobalFunc* const global, const std::string& pluginName);
    ~IMaster();

    double onMasterEvent (LWInstance, const LWMasterAccess* access);
    /// The event function is called to notify the handler that something has happened.
    /// Information about the event is included in the access structure, described below.
    /// The handler can respond to the event by issuing commands through functions
    /// provided in the access structure.
    /// The return value is currently ignored and should be set to 0.

    unsigned int masterFlags (LWInstance);
    /// Returns flag bits combined using bitwise-or.

    // implement is client
    static LWInstance create (void* priv, void* context, LWError* err);
    /// Create an instance. Called, for example, when the user selects
    /// your plug-in on the interface and when Layout loads a scene or
    /// an object file that refers to your plug-in
    /// priv is the same as the priv field of the LWInstanceFuncs structure
    /// and contains whatever your activation function put there. The context
    /// varies depending on the plug-in class, but this is often an item ID
    /// for the item this instance will be associated with. If you can't
    /// create an instance, set error to an error message string and return NULL

    LWError copy (LWInstance dest, LWInstance src);
    const char* describe (LWInstance inst);
    void destroy (LWInstance inst);
    LWError load (LWInstance inst, const LWLoadState* load);
    LWError save (LWInstance inst, const LWSaveState* save);

    void changeID (LWInstance, const LWItemID* itemID);
    /// Notification about a change in item IDs. This function is
    /// called if the IDs of items are going to change for any reason.
    /// The null-terminated item array passed to this function is of
    /// the form "old-1, new-1, old-2, new-2, ..." where the old ID is
    /// the value that is changing and the new ID is its new value.
    /// Clients should be careful to renumber each item only once.
    /// The changeID callback may also be called when an item's data,
    /// such as the geometry of an object, has changed, and when called
    /// for this reason, the old and new item IDs will be the same.

    const LWItemID* useItems (LWInstance inst);
    /// Returns an array of items this instance depends on.
    /// If your plug-in's behavior is based on the parameters of
    /// other items (such as the positions of objects), you'll want
    /// to be re-evaluated after those parameters change, and you use
    /// this function to inform Layout of that. The array is terminated
    /// by LWITEM_NULL. The function can return NULL if the instance
    /// doesn't use any items. It can also return LWITEM_ALL to indicate
    /// that it wants to be evaluated after any change occurs.

    GlobalFunc* getGlobal() { return global_; }

 private:
    GlobalFunc* global_;
    std::string pluginName;

}; // end class IMaster
