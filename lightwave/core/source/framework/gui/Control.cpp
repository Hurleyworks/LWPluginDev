// This source file was auto-generated by ClassMate++
#include "berserkpch.h"
#include "Control.h"
// Created: 13 Aug 2009 6:03:53 am
// Copyright (c) 2009, HurleyWorks

// ctor
Control::Control ()
	: controlID(0),
	  desc(),
	  id_(-1)
{

}

// dtor
Control::~Control ()
{

}

// getControlID
LWControlID Control::getControlID () const
{

	return controlID;
}

// setControlID
void Control::setControlID (LWControl * ctrlID)
{

	debug_assert(ctrlID);

	controlID = ctrlID;
}

// getDescription
LWPanControlDesc & Control::getDescription () 
{

	return desc;
}

// getIntVec
Eigen::Vector3i Control::getIntVec () const
{

	LWValue iVecVal = { LWT_VINT};
	controlID->get(controlID, CTL_VALUE, &iVecVal);

	Eigen::Vector3i v;
	v[0] = iVecVal.ivec.val[0];
	v[1] = iVecVal.ivec.val[1];
	v[2]= iVecVal.ivec.val[2];

    return v;
}

// getIntValue
int Control::getIntValue () const
{

	LWValue ival = { LWT_INTEGER };
	controlID->get(controlID, CTL_VALUE, &ival);

    return ival.intv.value;
}

// getPointer
void * Control::getPointer () const
{

	LWValue val = { LWT_POINTER };
	controlID->get(controlID, CTL_VALUE, &val);

    return val.ptr.ptr;
}

// setPointer
void Control::setPointer (void * ptr)
{	
	LWValue val = { LWT_POINTER };
	val.ptr.ptr = ptr;
	controlID->set( controlID, CTL_VALUE, &val);
	//fval.flt.value = value;
	//controlID->set( controlID, CTL_VALUE, &fval);
   
}

// getFloatValue
float Control::getFloatValue () const
{

	LWValue fval = { LWT_FLOAT };
	controlID->get(controlID, CTL_VALUE, &fval);

	return (float)fval.flt.value;
}

// setFloatValue
void Control::setFloatValue (float value)
{

	LWValue fval = { LWT_FLOAT };
	fval.flt.value = value;
	controlID->set( controlID, CTL_VALUE, &fval);
}

// setStringValue
void Control::setStringValue (const std::string & text)
{

	LWValue sval = { LWT_STRING};
	
	sval.str.buf = const_cast<char*>(text.data());
	sval.str.bufLen = text.length();
	controlID->set(controlID, CTL_VALUE, &sval);
}

// getStringValue
std::string Control::getStringValue () const
{

	LWValue sval = { LWT_STRING};
	std::string value;
	
	char *temp = new char[1024];
	sval.str.buf = temp;
	sval.str.bufLen = 1024;
	controlID->get(controlID, CTL_VALUE, &sval);
	value = temp;
	delete temp;

	return value;
}

// move
void Control::move (int x, int y)
{

	LWValue ival = { LWT_INTEGER };

	ival.intv.value = x;
	controlID->set(controlID, CTL_X, &ival );
	
	ival.intv.value = y;
	controlID->set(controlID, CTL_Y, &ival );
}

// getPosition
void Control::getPosition (int & x, int &y)
{

	LWValue ival = { LWT_INTEGER };
	controlID->get(controlID, CTL_X, &ival );
	x = (int)ival.intv.value;
	
	LWValue ival2 = { LWT_INTEGER };
	controlID->get(controlID, CTL_Y, &ival2 );
	y = (int)ival2.intv.value;
}

void Control::resize (int w, int h)
{
	LWValue ival = { LWT_INTEGER };

	ival.intv.value = w;
	controlID->set(controlID, CTL_W, &ival );
	
	ival.intv.value = h;
	controlID->set(controlID, CTL_H, &ival );
}

void Control::getSize (int & w, int & h)
{
	LWValue ival = { LWT_INTEGER };

	controlID->get(controlID, CTL_W, &ival );
	w = (int)ival.intv.value;
	
	LWValue ival2 = { LWT_INTEGER };
	controlID->get(controlID, CTL_H, &ival2 );
	h = (int)ival2.intv.value;
}

void Control::getHotSize (int & w, int & h)
{
	LWValue ival = { LWT_INTEGER };

	controlID->get(controlID, CTL_HOTW, &ival );
	w = (int)ival.intv.value;
	
	LWValue ival2 = { LWT_INTEGER };
	controlID->get(controlID, CTL_HOTH, &ival2 );
	h = (int)ival2.intv.value;
}

// redraw
void Control::redraw ()
{

	controlID->draw(controlID, DR_REFRESH);
}

// erase
void Control::erase ()
{

	controlID->draw(controlID, DR_ERASE);
}

// ghost
void Control::ghost ()
{

	controlID->draw(controlID, DR_GHOST);
}

// render
void Control::render ()
{

	controlID->draw(controlID, DR_RENDER);
}

// giveFocus
void Control::giveFocus ()
{

	LWValue ival = { LWT_INTEGER };
	ival.intv.value = 0;
	controlID->set( controlID, CTL_ACTIVATE, &ival);
}

// setIntValue
void Control::setIntValue (int value)
{

	LWValue ival = { LWT_INTEGER };
	ival.intv.value = value;
	controlID->set( controlID, CTL_VALUE, &ival);
}

// setSelectionCallback
void Control::setSelectionCallback (LWSelectionCallback callback)
{

	LWValue val = { LWT_POINTER };
	val.ptr.ptr = (LWSelectionCallback*)callback;
	controlID->set(controlID, CTL_SELECTEVENT, &val);;
}




