// This source file was auto-generated by ClassMate++
#include "berserkpch.h"
#include "ListBox.h"
// Created: 16 Aug 2009 8:36:38 am
// Copyright (c) 2009, HurleyWorks

// ctor
ListBox::ListBox (int width, 
				  int visibleElements,
				  const std::string& title,
				  LWNameCallback nameCallback,
				  LWCountCallback countCallback)
{	
	title_ = title;

	desc.type = LWT_POPUP;
	desc.listbox.width = width;
	desc.listbox.nameFn = nameCallback;
	desc.listbox.countFn = countCallback;
	desc.listbox.visItems = visibleElements;
}

// dtor
ListBox::~ListBox ()
{
}

// getTitle
std::string ListBox::getTitle () const
{

	return title_;
}

// getType
ControlType ListBox::getType () const
{

	return ControlType::ListBoxControl;
}

// --------------------------------------------------------- MultiList
// ctor
MultiList::MultiList (int width, 
					  int visibleElements,
				      const std::string& title,
				      LWMultiListNameCallback nameCallback,
				      LWCountCallback countCallback,
				      LWColwidthCallback widthCallback)
{	
	title_ = title;
	desc.type = LWT_MLIST;
	desc.multiList.width = width;
	desc.multiList.nameFn = nameCallback;
	desc.multiList.countFn = countCallback;
	desc.multiList.visItems = visibleElements;
	desc.multiList.colWidth = widthCallback;
}

// dtor
MultiList::~MultiList ()
{
}

// getTitle
std::string MultiList::getTitle () const
{

	return title_;
}

// getType
ControlType MultiList::getType () const
{

	return ControlType::MultiListBoxControl;
}


// --------------------------------------------------------- TreeList
// ctor
TreeList::TreeList (  int width, 
					  int height,
					  const std::string & title,
					  LWTreeInfoCallback infoCallback,
					  LWTreeCountCallback countCallback,
					  LWTreeChildCallback childCallback)
{	
	title_ = title;

	desc.type = LWT_TREE;
	desc.tree.width = width;
	desc.tree.height = height;
	desc.tree.infoFn = infoCallback;
	desc.tree.countFn = countCallback;
	desc.tree.leafFn = childCallback;
	desc.tree.moveFn = nullptr;
}

// dtor
TreeList::~TreeList ()
{	
}

// getTitle
std::string TreeList::getTitle () const
{	
	return title_;
}

// getType
ControlType TreeList::getType () const
{	

	return ControlType::TreeControl;
}


// --------------------------------------------------------- MultiTreelist
// ctor
MultiTreelist::MultiTreelist (int width,
                              int height, 
                              const std::string & title, 
                              LWMultiTreeInfoCallback infoCallback, 
                              LWTreeCountCallback countCallback, 
                              LWTreeChildCallback childCallback, 
                              LWColwidthCallback widthCallback)
{	
	desc.type = LWT_TREE;
	desc.multiTree.width = width;
	desc.multiTree.height = height;
	desc.multiTree.infoFn = infoCallback;
	desc.multiTree.countFn = countCallback;
	desc.multiTree.leafFn = childCallback;
	desc.multiTree.colWidth = widthCallback;
	desc.multiTree.moveFn = nullptr;
}

// dtor
MultiTreelist::~MultiTreelist ()
{	
}

// getTitle
std::string MultiTreelist::getTitle () const
{	
	return title_;
}

// getType
ControlType MultiTreelist::getType () const
{	
	return ControlType::MultiTreeControl;
}


