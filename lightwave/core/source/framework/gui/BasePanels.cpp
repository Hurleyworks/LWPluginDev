// This source file was auto-generated by ClassMate++
#include "berserkpch.h"
#include "BasePanels.h"
// Created: 11 Aug 2009 6:00:18 am
// Copyright (c) 2009, HurleyWorks

BasePanels::ControlMap BasePanels::controls_;

// ctor
BasePanels::BasePanels (GlobalFunc * global, const std::string& title)
	:  global_(global),
	   title_(title),
	   panelFuncs_(0),
	   panelID_(0)
	 
{	
	int xPanVer;
	panelFuncs_ = getCompatibleVersion<LWPanelFuncs>(LWPANELFUNCS_GLOBAL, global, xPanVer); 
	debug_assert(panelFuncs_);

	panelID_ = panelFuncs_->create(const_cast<char*>(title_.c_str()), panelFuncs_);
	debug_assert(panelID_);
}

// dtor
BasePanels::~BasePanels ()
{	

	//controls_.clear();
}

// destroy
void BasePanels::destroy ()
{	
	controls_.clear();
	if (panelFuncs_  && panelID_)
	{
		panelFuncs_->close(panelID_);

		// THis is causing heap corruption on LW exit 
		//panelFuncs_->destroy(panelID_);
	}
}

// draw
void BasePanels::draw (DrMode mode)
{

	panelFuncs_->draw(panelID_, mode);
}


// setUserData
void BasePanels::setUserData (void * userData)
{

	panelFuncs_->user_data = userData;
}

// setControlCallback
void BasePanels::setControlCallback (LWCtlEventHook callback)
{

	debug_assert(callback);

	ctrlEventCallback_ = callback;
}

// addControl
void BasePanels::addControl (Control::Ptr control, void * userData )
{

	LWControl *ctrl = panelFuncs_->addControl( panelID_, 
									const_cast<char*>(control->getType().ToString()),
									&control->getDescription(),
									const_cast<char*>(control->getTitle().c_str()) );

	debug_assert(ctrl);

	// make all control event callbacks 
	// go to the same function
	LWValue ival = { LWT_INTEGER };
	ival.ptr.ptr = userData;
	ctrl->set(ctrl, CTL_USERDATA, &ival);

	ival.ptr.ptr = (void*)ctrlEventCallback_;
	ctrl->set(ctrl, CTL_USEREVENT, &ival);

	control->setControlID(ctrl);
	controls_[ctrl] = control;
}

// find
Control::Ptr BasePanels::find (LWControlID control)
{

	LWControl* ctrl = static_cast<LWControl*>(control);
	debug_assert(ctrl);

	ControlMap::iterator it;
	it = controls_.find(ctrl);
	if( it != controls_.end() )
		return it->second;
	else
		return 0;
}

// open
void BasePanels::open (int flags)
{

	debug_assert(panelFuncs_ && panelID_);

	//panelFuncs_->set(panelID_, PAN_CONFIGTAG, 0 );
	panelFuncs_->open(panelID_,	flags );
}

void BasePanels::close()
{
	if( panelFuncs_ && panelID_)
		panelFuncs_->close(panelID_);
}

// handle
int BasePanels::handle (int flags)
{

	return panelFuncs_->handle(panelID_, flags);
}

// setPosition
void BasePanels::setPosition (int x, int y)
{

	debug_assert( x >= 0 && y >= 0);
	debug_assert(panelFuncs_ && panelID_);


	//panelFuncs_->set(panelID_, PAN_X, &x );
	//panelFuncs_->set(panelID_, PAN_Y, &y );

	LWValue  ival = { LWT_INTEGER };

	ival.intv.value = x;
	panelFuncs_->set(panelID_, PAN_X,(void *)&ival.intv.value);

	ival.intv.value = y;
	panelFuncs_->set(panelID_, PAN_Y,(void *)&ival.intv.value);
}

void BasePanels::setSize (int minW, int minH, int maxW, int maxH)
{

	debug_assert( minW > 0 && minW > 0);
	debug_assert(panelFuncs_ && panelID_);

	LWValue  ival = { LWT_INTEGER };

	ival.intv.value = minW;
	panelFuncs_->set(panelID_, PAN_MIN_W,(void *)&ival.intv.value);

	ival.intv.value = minH;
	panelFuncs_->set(panelID_, PAN_MIN_H,(void *)&ival.intv.value);

	ival.intv.value = maxW;
	panelFuncs_->set(panelID_, PAN_MAX_W,(void *)&ival.intv.value);

	ival.intv.value = maxH;
	panelFuncs_->set(panelID_, PAN_MAX_H,(void *)&ival.intv.value);
}

// setSize
void BasePanels::setSize (int w, int h)
{

	debug_assert( w > 0 && h > 0);
	debug_assert(panelFuncs_ && panelID_);

	LWValue  ival = { LWT_INTEGER };

	ival.intv.value = w;
	panelFuncs_->set(panelID_, PAN_W,(void *)&ival.intv.value);

	ival.intv.value = h;
	panelFuncs_->set(panelID_, PAN_H,(void *)&ival.intv.value);
}

// setPanDrawCallback
void BasePanels::setPanDrawCallback (LWPanDrawHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_USERDRAW, (void*)callback);
}

// setPanelResizeCallback
void BasePanels::setPanelResizeCallback (LWPanResizeHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_USERRESIZE, (void*)callback);
	//panelFuncs_->set(panelID_, PAN_H, (void*)callback);
}

// setPanKeyCallback
void BasePanels::setPanKeyCallback (LWPanKeyHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_USERKEYS, (void*)callback);
	panelFuncs_->set(panelID_, PAN_USERKEYUPS, (void*)callback);
}

// setPanMouseCallback
void BasePanels::setPanMouseCallback (LWPanMouseHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_MOUSEBUTTON, (void*)callback);
	panelFuncs_->set(panelID_, PAN_MOUSEMOVE, (void*)callback);
}

// setPanMouseWheelCallback
void BasePanels::setPanMouseWheelCallback (LWPanMouseHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_MOUSEWHEEL, (void*)callback);
}

// setPanUserCallback
void BasePanels::setPanUserCallback (LWPanHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_USEROPEN, (void*)callback);
	//panelFuncs_->set(panelID_, PAN_USERCLOSE, (void*)callback);
}

// setPanelCloseCallback
void BasePanels::setPanelCloseCallback (LWPanHook callback)
{

	debug_assert(panelFuncs_ && panelID_);

	panelFuncs_->set(panelID_, PAN_USERCLOSE, (void*)callback);
}




